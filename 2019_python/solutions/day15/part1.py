import numpy as np
import re
import math
from random import randint
import sys
sys.path.append('..')
from shared.intcode import IntCode


def next_position(position, direction):
    if direction == 1:
        new_position = (position[0], position[1] + 1)
    elif direction == 2:
        new_position = (position[0], position[1] - 1)
    elif direction == 3:
        new_position = (position[0] - 1, position[1])
    elif direction == 4:
        new_position = (position[0] + 1, position[1])

    return new_position


def do_the_thing(content):
    raw_program = list(map(lambda x: int(x), content.split(',')))

    p = IntCode(raw_program)

    positions = dict()
    position = (0, 0)
    direction = 1
    positions[position] = (1, 0)
    done = False
    count = 0
    breaker = 3000000
    n_steps_so_far = 0
    while not done:
        print(position)
        p.inputs.append(direction)
        done = p.run(True)
        status = p.outputs.pop(0)

        if status == 0:
            positions[next_position(position, direction)] = (0, 0)
            direction = randint(1, 4)
        else:
            position = next_position(position, direction)
            n_steps_so_far = n_steps_so_far + 1
            if position in positions:
                n_steps_so_far = min(n_steps_so_far, positions[position][1])
            positions[position] = (status, n_steps_so_far)
            direction = randint(1, 4)

        if status == 2:
            print("found it!")
            print(position)
            print(n_steps_so_far)
            break

        print(count, breaker)
        if count > breaker:
            break

        count += 1

    display(positions)
    # display({(0, 0): 1, (0, 1): 1, (-1, 1): 0, (0, 2): 1, (1, 2): 0, (-1, 2): 0, (1, 0): 0, (0, -1): 0, (-1, 0): 0, (1, 1): 0, (0, 3): 1, (0, 4): 1, (-1, 4): 1, (-1, 5): 0, (-1, 3): 0, (0, 5): 0, (-2, 4): 1, (-2, 5): 1, (-3, 5): 0, (-3, 4): 0, (1, 3): 0, (1, 4): 0, (-2, 6): 1, (-3, 6): 1, (-3, 7): 0, (-4, 6): 1, (-4, 7): 0, (-5, 6): 1, (-5, 7): 0, (-5, 5): 0, (-4, 5): 0, (-1, 6): 0, (-2, 7): 0, (-2, 3): 0, (-6, 6): 1, (-6, 5): 1, (-6, 7): 0, (-7, 5): 0, (-6, 4): 1, (-7, 6): 0, (-6, 3): 0, (-5, 4): 0, (-7, 4): 1, (-8, 4): 1, (-7, 3): 0, (-8, 5): 0, (-9, 4): 1, (-9, 5): 0, (-9, 3): 0, (-8, 3): 0, (-10, 4): 1, (-10, 5): 1, (-10, 3): 0, (-11, 5): 0, (-10, 6): 1, (-10, 7): 0, (-11, 4): 0, (-11, 6): 0, (-9, 6): 1, (-8, 6): 1, (-9, 7): 0, (-8, 7): 1, (-7, 7): 0, (-8, 8): 1, (-8, 9): 0, (-9, 8): 0, (-7, 8): 1, (-6, 8): 1, (-6, 9): 1, (-5, 9): 0, (-7, 9): 0, (-5, 8): 0, (-6, 10): 1, (-7, 10): 0, (-5, 10): 1, (-4, 10): 1, (-4, 11): 0, (-4, 9): 1, (-3, 9): 0, (-4, 8): 1, (-5, 11): 0, (-6, 11): 0, (-3, 10): 0, (-3, 8): 1, (-2, 8): 1, (-2, 9): 1, (-1, 8): 0, (-1, 9): 0, (-2, 10): 1, (-2, 11): 1, (-1, 11): 0, (-3, 11): 0, (-2, 12): 1, (-1, 12): 0, (-2, 13): 0, (-3, 12): 1, (-3, 13): 0, (-4, 12): 1, (-4, 13): 1, (-5, 13): 0, (-4, 14): 1, (-3, 14): 0, (-5, 14): 0, (-4, 15): 1, (-5, 12): 0, (-3, 15): 0, (-5, 15): 0, (-4, 16): 1, (-4, 17): 0, (-5, 16): 1, (-5, 17): 0, (-3, 16): 0, (-6, 16): 1, (-7, 16): 0, (-6, 15): 1, (-6, 14): 1, (-7, 14): 1, (-8, 14): 1, (-7, 13): 0, (-6, 13): 0, (-7, 15): 0, (-1, 10): 0, (-9, 14): 1, (-9, 13): 0, (-9, 15): 0, (-8, 15): 0, (-8, 13): 0, (-10, 14): 1, (-10, 15): 0, (-11, 14): 1, (-11, 15): 0, (-12, 14): 1, (-12, 15): 0, (-12, 13): 0, (-13, 14): 1, (-14, 14): 1, (-15, 14): 0, (-13, 13): 0, (-13, 15): 0, (-14, 15): 1, (-14, 16): 1, (-14, 17): 0, (-13, 16): 1, (-13, 17): 0, (-12, 16): 1, (-11, 16): 0, (-12, 17): 1, (-12, 18): 1, (-13, 18): 0, (-11, 18): 0, (-11, 17): 0, (-12, 19): 1, (-11, 19): 0, (-12, 20): 1, (-12, 21): 0, (-13, 19): 0, (-11, 20): 1, (-10, 20): 1, (-9, 20): 1, (-9, 19): 0, (-8, 20): 1, (-8, 21): 0, (-7, 20): 0, (-10, 21): 0, (-8, 19): 1, (-7, 19): 0, (-9, 21): 0, (-10, 19): 0, (-8, 18): 1, (-9, 18): 1, (-11, 21): 0, (-13, 20): 0, (-10, 18): 1, (-10, 17): 1, (-9, 17): 0, (-10, 16): 1, (-9, 16): 1, (-8, 17): 0, (-7, 18): 1, (-6, 18): 1, (-6, 19): 0, (-6, 17): 0, (-7, 17): 0, (-15, 16): 0, (-15, 15): 0, (-14, 13): 0, (-10, 13): 0, (-11, 13): 0, (-8, 16): 1, (-5, 18): 1, (-4, 18): 1, (-3, 18): 0, (-4, 19): 1, (-4, 20): 1, (-4, 21): 0, (-3, 20): 1, (-3, 19): 0, (-5, 19): 0, (-2, 20): 1, (-2, 21): 0, (-5, 20): 1, (-6, 20): 1, (-6, 21): 0, (-5, 21): 0, (-3, 21): 0, (-1, 20): 0, (-2, 19): 1, (-2, 18): 1, (-2, 17): 1, (-1, 19): 0, (-1, 18): 0, (-2, 16): 1, (-1, 16): 0, (-2, 15): 1, (-2, 14): 1, (-1, 14): 1, (-1, 15): 0, (0, 14): 1, (0, 15): 0, (0, 13): 1, (1, 13): 0, (1, 14): 0, (-1, 13): 0, (0, 12): 1, (1, 12): 1, (2, 12): 1, (2, 11): 1, (3, 11): 0, (2, 10): 1, (2, 9): 0, (3, 10): 0, (1, 10): 1, (1, 11): 0, (3, 12): 0, (2, 13): 0, (0, 10): 1, (0, 11): 0, (0, 9): 1, (1, 9): 0, (0, 8): 1, (1, 8): 0, (0, 7): 1, (-1, 7): 0, (1, 7): 0, (0, 6): 1, (1, 6): 1, (1, 5): 0, (2, 6): 1, (3, 6): 0, (2, 5): 0, (-3, 17): 0, (-1, 17): 0, (2, 7): 1, (3, 7): 0, (2, 8): 1, (3, 8): 1, (3, 9): 0, (4, 8): 1, (4, 7): 0, (5, 8): 0, (4, 9): 1, (4, 10): 1, (5, 9): 0, (4, 11): 1, (4, 12): 1, (4, 13): 1, (4, 14): 1, (5, 13): 0, (3, 13): 0, (4, 15): 0, (5, 14): 0, (5, 12): 0, (5, 11): 0, (5, 10): 0, (3, 14): 1, (3, 15): 0, (2, 14): 1, (2, 15): 1, (1, 15): 0, (2, 16): 1, (1, 16): 1, (3, 16): 0, (0, 16): 1, (1, 17): 0, (2, 17): 0, (0, 17): 1, (0, 18): 1, (0, 19): 0, (1, 18): 1, (1, 19): 0, (2, 18): 1, (2, 19): 1, (3, 19): 0, (2, 20): 1, (3, 20): 1, (3, 21): 0, (4, 20): 1, (4, 21): 0, (4, 19): 0, (5, 20): 1, (1, 20): 1, (1, 21): 0, (0, 20): 1, (0, 21): 0, (3, 18): 0, (2, 21): 0, (5, 21): 0, (5, 19): 0, (6, 20): 1, (6, 19): 1, (7, 20): 0, (7, 19): 0, (6, 18): 1, (7, 18): 1, (6, 17): 0, (7, 17): 0, (6, 21): 0, (5, 18): 0, (8, 18): 1, (8, 19): 0, (8, 17): 0, (9, 18): 1, (10, 18): 1, (10, 17): 0, (9, 19): 0, (11, 18): 0, (9, 17): 0, (10, 19): 1, (10, 20): 1, (10, 21): 0, (11, 20): 1, (12, 20): 1, (12, 21): 0, (12, 19): 1, (13, 19): 0, (12, 18): 1, (11, 19): 0, (13, 20): 0, (13, 18): 1, (13, 17): 0, (14, 18): 1, (15, 18): 0, (14, 17): 1, (14, 19): 0, (15, 17): 0, (14, 16): 1, (15, 16): 0, (14, 15): 1, (15, 15): 0, (14, 14): 1, (13, 15): 0, (13, 14): 0, (15, 14): 1, (15, 13): 0, (14, 13): 0, (16, 14): 1, (17, 14): 0, (16, 15): 0, (16, 13): 1, (17, 13): 0, (16, 12): 1, (15, 12): 1, (15, 11): 0, (17, 12): 0, (14, 12): 1, (14, 11): 0, (13, 12): 1, (12, 12): 1, (12, 11): 1, (12, 10): 1, (12, 9): 1, (13, 9): 0, (13, 11): 0, (11, 9): 0, (11, 10): 0, (11, 12): 0, (11, 11): 0, (13, 10): 0, (12, 8): 1, (13, 8): 0, (11, 8): 0, (12, 7): 1, (11, 7): 0, (13, 7): 0, (12, 6): 1, (11, 6): 0, (13, 6): 0, (12, 13): 0, (16, 11): 0, (13, 13): 0, (12, 17): 0, (13, 16): 0, (11, 21): 0, (9, 20): 1, (9, 21): 0, (12, 5): 1, (11, 5): 0, (12, 4): 1, (12, 3): 1, (12, 2): 1, (11, 2): 0, (13, 2): 1, (11, 3): 0, (13, 3): 0, (13, 4): 0, (13, 5): 0, (11, 4): 0, (8, 20): 1, (8, 21): 0, (12, 1): 0, (14, 2): 1, (14, 3): 0, (14, 1): 1, (15, 2): 0, (13, 1): 0, (15, 1): 0, (14, 0): 1, (14, -1): 0, (15, 0): 1, (13, 0): 0, (15, -1): 0, (16, 0): 1, (16, 1): 0, (16, -1): 1, (17, -1): 0, (16, -2): 1, (17, 0): 0, (16, -3): 1, (16, -4): 1, (16, -5): 1, (15, -4): 0, (16, -6): 1, (17, -3): 0, (17, -4): 0, (17, -5): 0, (15, -3): 0, (17, -2): 0, (15, -2): 0, (15, -6): 0, (16, -7): 0, (17, -6): 1, (18, -6): 1, (19, -6): 0, (18, -7): 1, (19, -7): 0, (18, -5): 1, (19, -5): 0, (18, -8): 1, (17, -8): 1, (16, -8): 1, (15, -8): 1, (15, -9): 0, (17, -9): 0, (19, -8): 0, (18, -9): 0, (17, -7): 0, (14, -8): 1, (14, -9): 0, (13, -8): 1, (14, -7): 0, (12, -8): 1, (11, -8): 0, (16, -9): 0, (15, -7): 0, (13, -7): 0, (12, -9): 1, (12, -10): 1, (12, -7): 0, (11, -9): 0, (13, -9): 0, (12, -11): 0, (11, -10): 1, (13, -10): 0, (11, -11): 0, (10, -10): 1, (9, -10): 0, (10, -9): 0, (10, -11): 1, (9, -11): 0, (10, -12): 1, (11, -12): 1, (12, -12): 1, (11, -13): 0, (12, -13): 1, (12, -14): 1, (11, -14): 1, (12, -15): 0, (13, -14): 0, (13, -12): 0, (9, -12): 0, (10, -13): 0, (11, -15): 0, (13, -13): 0, (15, -5): 0, (18, -4): 1, (18, -3): 1, (19, -3): 0, (18, -2): 1, (18, -1): 1, (19, -1): 0, (18, 0): 1, (18, 1): 1, (17, 1): 0, (18, 2): 1, (17, 2): 1, (17, 3): 0, (16, 2): 1, (16, 3): 1, (15, 3): 0, (16, 4): 1, (17, 4): 0, (15, 4): 1, (16, 5): 0, (18, 3): 0, (14, 4): 1, (14, 5): 1, (14, 6): 1, (15, 6): 0, (15, 5): 0, (19, 2): 0, (19, 0): 0, (19, 1): 0, (19, -2): 0, (19, -4): 0, (10, -14): 1, (10, -15): 0, (9, -14): 1, (9, -13): 0, (8, -14): 1, (8, -13): 0, (9, -15): 0, (7, -14): 0, (8, -15): 1, (7, -15): 0, (8, -16): 1, (7, -16): 0, (8, -17): 1, (9, -17): 0, (8, -18): 1, (7, -18): 1, (7, -19): 0, (7, -17): 0, (9, -16): 0, (14, 7): 1, (14, 8): 1, (15, 8): 0, (14, 9): 1, (15, 9): 0, (14, 10): 1, (15, 10): 1, (16, 10): 1, (17, 10): 0, (16, 9): 1, (17, 9): 0, (6, -18): 1, (6, -17): 1, (5, -17): 0, (6, -16): 1, (6, -15): 1, (5, -16): 0, (5, -18): 0, (6, -19): 0, (6, -14): 1, (5, -14): 1, (4, -14): 1, (4, -13): 1, (5, -13): 0, (3, -13): 0, (6, -13): 0, (3, -14): 0, (4, -12): 1, (3, -12): 0, (4, -11): 0, (4, -15): 0, (5, -15): 0, (16, 8): 1, (16, 7): 1, (17, 7): 0, (17, 8): 0, (16, 6): 1, (17, 6): 1, (18, 6): 1, (15, 7): 0, (17, 5): 0, (19, 6): 0, (18, 5): 1, (18, 7): 1, (19, 7): 0, (19, 5): 0, (18, 4): 1, (19, 4): 0, (18, 8): 1, (18, 9): 1, (18, 10): 1, (19, 8): 0, (19, 9): 0, (19, 10): 0, (18, 11): 1, (17, 11): 0, (18, 12): 1, (19, 12): 0, (19, 11): 0, (18, 13): 1, (18, 14): 1, (19, 14): 0, (18, 15): 1, (19, 15): 0, (19, 13): 0, (17, 15): 0, (18, 16): 1, (18, 17): 0, (19, 16): 0, (17, 16): 1, (16, 16): 1, (16, 17): 1, (17, 17): 0, (16, 18): 1, (17, 18): 0, (16, 19): 1, (17, 19): 0, (16, 20): 1, (15, 19): 0, (16, 21): 0, (17, 20): 1, (18, 20): 1, (18, 21): 0, (18, 19): 1, (17, 21): 0, (19, 20): 0, (19, 19): 0, (18, 18): 2})


def display(positions):
    maxx = max(k[0] for k in positions.keys())
    minx = min(k[0] for k in positions.keys())
    maxy = max(k[1] for k in positions.keys())
    miny = min(k[1] for k in positions.keys())

    print_grid = np.full((maxy-miny+1, maxx-minx+1), ' ', dtype=object)

    def char(v):
        if v == 0:
            return '#'
        elif v == 1:
            return ' '
        elif v == 2:
            return '~'

    for key, value in positions.items():
        print_grid[key[1]-miny, key[0]-minx] = char(value[0])
        if (key[0], key[1]) == (0, 0):
            print_grid[key[1] - miny, key[0] - minx] = 'O'

    for row in print_grid:
        print(''.join(row))




def main():
    with open('./input.txt', 'r') as f:
        for line in f:
            content = line.strip('\n')

    return do_the_thing(content)


if __name__ == "__main__":
    print(main())
